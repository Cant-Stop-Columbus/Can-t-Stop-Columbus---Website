{"version":3,"sources":["components/Firebase/config.js","components/Landing/ColumbusNavigation.js","components/Landing/Landing.js","main.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ColumbusNavigation","props","onSignout","e","preventDefault","auth","signOut","state","signedIn","currentComponent","this","onAuthStateChanged","user","setState","href","Component","Home","style","width","margin","color","fixedHeader","className","title","textDecoration","to","src","height","alt","scroll","hidePhone","hideTablet","col","strings","typeSpeed","backSpeed","loop","shadow","border","ripple","accent","raised","onClick","onNext","hideDesktop","colored","position","left","bottom","name","Main","exact","path","component","Landing","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8271139e.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCLbQh8h8ILes08XXds40U6FNl-Xo7u0fc\",\n    authDomain: \"musician-ai.firebaseapp.com\",\n    databaseURL: \"https://musician-ai.firebaseio.com\",\n    projectId: \"musician-ai\",\n    storageBucket: \"musician-ai.appspot.com\",\n    messagingSenderId: \"1040193026135\",\n    appId: \"1:1040193026135:web:31faed6d3a37a6d2f94b12\",\n    measurementId: \"G-6J8XHDBY0C\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\n\nexport { db };\nexport default firebase;","import React, { Component } from 'react';\nimport {Navigation} from 'react-mdl';\nimport firebase from '../Firebase/config';\n\nexport class ColumbusNavigation extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            signedIn: false\n        }\n    }\n    \n    componentDidMount() {\n        const currentComponent = this;\n        //Retrieve ARTIST NAME from Firebase\n        firebase.auth().onAuthStateChanged(function(user) {\n            currentComponent.setState({\n                signedIn: (user ? true : false)\n            })\n        });\n    }\n\n    onSignout = (e) => {\n        e.preventDefault();\n        firebase.auth().signOut();\n    }\n    \n    render() {\n        return (\n            <div>\n                <Navigation>\n                    <a href=\"https://coronavirus.ohio.gov/wps/portal/gov/covid-19/\">Ohio COROVID-19</a>\n                    <a href=\"https://join.slack.com/t/cantstopcolumbus/shared_invite/zt-cs7p7uxc-QskndeRo_X4b1ovyVJetxg\">Join Slack</a>\n                    <a href=\"https://app.slack.com/client/T0101PN34J1/\">Open Slack</a>\n                </Navigation>\n            </div>\n        )\n    }\n}\n\nexport default ColumbusNavigation\n","import React, { Component } from 'react';\nimport { Grid, Cell, Layout, Header, Drawer, Card, CardTitle, CardText, CardActions, Button, FABButton, Icon} from 'react-mdl';\nimport { Link } from 'react-router-dom';\nimport Typed from 'react-typed';\nimport ColumbusNavigation from './ColumbusNavigation';\n\nexport class Home extends Component {\n\n    render() {\n        return (\n            <div style={{ width: '100%', margin: 'auto'}}>\n                <Layout style={{color: '#fb4080'}} fixedHeader>\n                    <Header className=\"header-color\" title={<Link style={{ textDecoration: 'none', color: 'white' }} to='/'><img src=\"cantstopcolumbus-logo.png\"  height=\"50\" width=\"50\" alt=\"logo\"></img></Link>} scroll>\n                        <Cell hidePhone hideTablet>\n                            <ColumbusNavigation></ColumbusNavigation>\n                        </Cell>\n                    </Header>\n                    <Drawer title=\"Interactive Albums\">\n                        <ColumbusNavigation></ColumbusNavigation>\n                    </Drawer>\n                    <Grid className='landing-grid'>\n                        <Cell col={12}>\n                            <div className=\"banner-text\">\n                                <h1>\n                                    <Typed\n                                        strings={\n                                            [\n                                                'Hello Columbus Citizen :)', \n                                                'We need YOUR help!',\n                                                'Welcome to the Can\\'t Stop Columbus',\n                                                'We are an open community of hackers',\n                                                'We are an open community of politicians',\n                                                'We are an open community of designers',\n                                                'We are an open community of doctors',\n                                                'We are an open community of problem solvers',\n                                                'We are an open community of hackers',\n                                                'Join the Hackathon',\n                                                'Spark the Solution',\n                                                'Hackathon Starts March 26, 2020'\n                                            ]\n                                        }\n                                        typeSpeed={40}\n                                        backSpeed={50}\n                                        loop\n                                    />\n                                </h1>\n                            </div>\n                        </Cell>\n                        <Cell col={4} hideTablet hidePhone>\n                            <Card shadow={0} style={{ margin: 'auto' }}>\n                                <CardTitle> Planning Doc</CardTitle>\n                                <CardText>\n                                    Primary for ALL hackathon resources. Includes: Planning, Team Formation, Ideas, etc to fight COROVID-19.\n                                </CardText>\n                                <CardActions border>\n                                    <a href = \"https://docs.google.com/spreadsheets/d/16rHl_qXc1wp8vSg_Ux8YXdYe_F_B88ghLW7ese2YFec/edit?usp=sharing\"><Button ripple accent raised >Get Started</Button></a>\n                                </CardActions>\n                            </Card>\n                        </Cell>\n                        <Cell col={4} hideTablet hidePhone>\n                            <Card shadow={0} style={{ margin: 'auto' }}>\n                                <CardTitle> Slack Channel</CardTitle>\n                                <CardText>\n                                    Chat for ALL hackathon communications. Check it out, collaborate, form a team, and save the day from COROVID-19.\n                                </CardText>\n                                <CardActions border>\n                                    <a href = \"https://app.slack.com/client/T0101PN34J1/\"><Button ripple accent raised >Get Started</Button></a>\n                                </CardActions>\n                            </Card>\n                        </Cell>\n                        <Cell col={4} hideTablet hidePhone>\n                            <Card shadow={0} style={{ margin: 'auto' }}>\n                                <CardTitle> Spread the Word</CardTitle>\n                                <CardText>\n                                    Twitter is Earth's realtime communication channel. One tweet is all it takes to spread awareness and fight COROVID-19.\n                                </CardText>\n                                <CardActions border>\n                                    <Button onClick={this.onNext} ripple accent raised >Get Started</Button>\n                                </CardActions>\n                            </Card>\n                        </Cell>\n                        <Cell col={12} hideDesktop>\n                            <FABButton colored ripple onClick={this.onNext} style={{position: \"fixed\", left: \"50px\", bottom: \"50px\"}}>\n                                <Icon name=\"add\" />\n                            </FABButton>\n                        </Cell>\n                    </Grid>\n                </Layout>\n            </div>\n        )\n    }\n}\n\nexport default Home\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Landing from './components/Landing/Landing';\n\nconst Main = () => (\n    <Switch>\n        <Route exact path='/' component={Landing} />\n    </Switch>\n)\n\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './main';\n\n\nexport class App extends Component {\n    render() {\n        return (\n            <div>\n                <Main />\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}